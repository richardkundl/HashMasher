@using System.Text.RegularExpressions
@model IEnumerable<HashMasher.Model.ProcessedLink>
@{
    ViewBag.Title = "Home Page";
}

@section featured {
<section class="featured">
    <div class="content-wrapper">
        <hgroup class="title">
            <h1>Hey.</h1>
            <h2>How you doing?</h2>
        </hgroup>
    </div>
</section>
}


<h3>#codemash tweets with links:</h3>
    @foreach (var item in Model)
    {
        <div>
            <h5><a href="@item.ExpandedLink" target="_blank">@item.ExpandedLink</a></h5>
            @if(item.ExpandedLink.Contains("youtube"))
            {
                var regex = new Regex("~v=([0-9a-z_]+)~i");
                var matches = regex.Match(item.ExpandedLink);
                <h1>@matches.Groups[0].Value</h1>
                <iframe  width="320" height="190" src="http://www.youtube.com/embed/@matches.Groups[0].Value" frameborder="0" allowfullscreen></iframe>
            }
            @{
            var firstLink = item.StatusContainingLink.FirstOrDefault();
            var display = (firstLink != null && string.IsNullOrEmpty(firstLink.HtmlText)) ? firstLink.Text : firstLink.HtmlText;
            }
            
            <p>@Html.Raw(display)</p>
            <div><a target="_blank" href="http://twitter.com/@firstLink.User">@@@firstLink.User</a> at @(item.Created.HasValue ? String.Format("{0:g}", item.Created.Value) : "unknown")</div>
        </div>
    }

